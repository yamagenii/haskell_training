参考書　ふつうのHaskellプログラミング

Haskell

関数型プログラミング言語

特徴
1.柔軟なプログラミング
2.コンパイル時の型チェックが強力
3.読みやすい
4.遅延評価が基本



関数には絶対返り値がある（void）なし

基本はキャメルケースっぽい
大文字小文字区別

拡張子は.hs

コンパイラはGHC(Glasgow Haskell Compiler)






mainアクションと関数適用
vim /helloHaskell/hello.hs
main = putStrLn "hello haskell"

変数mainの定義

このmainはアクションという
アクションはHaskellの値
ここはコマンドライン出力するというアクション

haskellは開始するとmainアクションの評価が始まり終わるとプログラムも終わる
cでいうmain関数


関数の引数　カッコはいらない
putStrLnは標準出力に文字列と改行を出力する時に使う関数
これを正確にいうと、文字列と改行を出力するアクションを返す関数

用語："hellohaskell"にputStrLnを適用（apply）する
※渡すなどの表現ではない

""は文字列リテラル　\nは改行を表すエスケープシークエンス



入出力の基本

catコマンドの作成
実行ファイルをcatで作成
./cat < test.txt

getContestsアクション
標準入力を読み込む

putStr関数
改行なしで標準出力に出力する

レイアウト
csとputStrが揃える
これはcでのブロックに相当する、pythonはインデントに相当する
do式で複数の式を束ねる場合はインデントを揃える
これを『レイアウト』『オフサイトルール』という
ここでは「cs <- getContents」と「putStr cs」をまとめる

do式
getContentはアクション　putStr csのアクション
アクションをdo式でまとめるとアクションが上から下に実行される
doを使わないと上から下とは限らない　遅延評価が関係している　後述

ちなみにmain = putStr getContentsは型エラー

入出力と「<-」
アクションの結果を得る時に<-構文を使う
getContentsアクションで入力した文字列が変数csに結びつけられる
これを
変数を値に束縛するという　　　　変数は束縛される側

変数の参照
束縛された変数は参照できる
csをpurStrに適用している



このプログラムの疑問
すべてを読み込むまで出力が変わらないのか
遅延時間による処理が入っているらしいです　後述
getContentsの秘密がある
正確には「標準出力を読み込むという契約」
変数csは束縛されているものは文字列ではなく、あとで読み込まれる文字列の身代わり

身代わりを使おうとするー＞getContentsアクションが活性化し必要な文字列を読み込みー＞身代わりを本物にすりかえる


<-は変数束縛だが右辺にはアクションなどの限られた型しか使えない　
またdo式の中だけなど限定されている
実際はletなどらしい　後述
