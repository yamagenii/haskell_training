haskellの型

cのような静的な型チェックあるが型推論機能があり割と協力らしい

基本的な型
Int　整数値　12
Char　文字 ''
String　文字列 ""
Bool　真偽値 True False
[○○]　〇〇のリスト [1,2,3]

Stringは[Char]と同義


関数の型

第一引数型->第二引数型->・・・->返り値型
lines関数　文字列を\nで区切ってリストにする
String -> [String]


型変数

例length関数の型
[a]->Int

このaは型変数といってどの型に置き換えてもいいことを示す
型変数を含む型のことを多相型（polymorphic type）
慣習的にa,b,cを使う


take関数の型
Int->[a]->[a]

mapの型
(a->b)->[a]->[b]

型が違うことは明示する


関数を変数とする考え

square n = n*n
これはnを2乗する関数という値に変数squareが束縛されていると考えられる
関数名はすべて変数であって、その変数は関数に束縛されている


関数を変数とするとそれを引数にできる気がする
map square [1,2,3]
haskellではこのような書き方が可能で高階関数という
c言語の関数ポインタみたいな感じ


map関数
map :: (a -> b) -> [a] -> [b]
第一引数　(a -> b)  aを引数にしてbを返す関数の型
第二引数　[a]
返り値　　[b]

簡単に言うと
map square [1,2,3] は[(square 1),(square 2),(square 3)]




